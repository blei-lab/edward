"""Autogenerate navbar and convert {{symbol}}s to a format for the parser.

All pages in src_dir/api/ must be an element in PAGES. Otherwise the
page will have no navbar.

The order of the navbar is given by the order of PAGES.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import os
import shutil
import re

parser = argparse.ArgumentParser()
parser.add_argument('--src_dir', type=str)
parser.add_argument('--out_dir', type=str)
args = parser.parse_args()

# Note we don't strictly need the 'parent_pages' field. We can
# technically infer them based on the other pages' 'child_pages'. It
# is denoted only for convenience.
PAGES = [
    {
        'page': 'index.tex',
        'title': 'Home',
        'parent_pages': [],
        'child_pages': [],
    },
]


def get_tensorflow_version():
  import tensorflow
  return str(getattr(tensorflow, '__version__', '<unknown verison>'))


print("Starting autogeneration.")
src_dir = os.path.expanduser(args.src_dir)
out_dir = os.path.expanduser(args.out_dir)
shutil.copytree(src_dir, out_dir)

for page_data in PAGES:
  page_name = page_data['page']
  path = os.path.join(out_dir, 'api', page_name)
  print(path)

  # TODO do for /api/ed
  # Insert autogenerated content into page.
  document = open(path).read()
  if '{{tensorflow_version}}' in document:
    document = document.replace('{{tensorflow_version}}',
                                get_tensorflow_version())

  subdir = os.path.dirname(path)
  if not os.path.exists(subdir):
    os.makedirs(subdir)

  # Write to file.
  open(path, 'w').write(document)
